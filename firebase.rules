rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Allow reading user data for friends and search
      allow read: if true;
      
      // Allow create if user is creating their own document with valid data
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['username', 'searchTerms']) &&
        request.resource.data.searchTerms is list &&
        request.resource.data.username is string &&
        request.resource.data.username.size() >= 3 &&
        request.resource.data.username.matches('^[a-zA-Z0-9_]+$');
      
      // Allow update if user is updating their own document or friends list
      allow update: if isOwner(userId) || 
        (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'friends',
          'friendRequests',
          'following',
          'followers'
        ]));
    }

    match /chats/{chatId} {
      // Allow read and write if user is a participant
      allow read, write: if isAuthenticated() && (
        resource == null || 
        request.auth.uid in resource.data.participants ||
        request.auth.uid in request.resource.data.participants
      );
    }

    match /messages/{messageId} {
      // Allow read if user is participant in the chat
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants;
      
      // Allow create if user is participant and is the sender
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId &&
        exists(/databases/$(database)/documents/chats/$(request.resource.data.chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.participants &&
        request.resource.data.content is string;
      
      // Allow update only for read status if user is the receiver
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.receiverId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }

    match /friendRequests/{requestId} {
      // Allow read if user is sender or receiver
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );
      
      // Allow create if user is the sender and data is valid
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId &&
        request.resource.data.keys().hasAll(['senderId', 'receiverId', 'status', 'createdAt']) &&
        request.resource.data.status == 'pending';
      
      // Allow update only for status changes by receiver
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.receiverId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
        ['accepted', 'rejected'].hasAny([request.resource.data.status]);
      
      // Allow delete if user is sender or receiver
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
    }
  }
}